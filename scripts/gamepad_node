#!/usr/bin/env python

### IMPORT MODULES ###
import rospy
import numpy as np
from gamepad.gamepad import *

### IMPORT ROS MESSAGE TYPES ###
from sensor_msgs.msg import Joy
from gamepad.msg import Gamepad



### CLASS ###
class GamepadNode():

    # INITIALISATION
    def __init__(self):
        """Initialises an instance of the GamepadNode class. 
           Sets class variables, gets ROS parameters and performs parameter safety checks."""

        # Initialise node so can get access to ROS stuff (e.g. parameter server)
        rospy.init_node('gamepad_node')

        # Class Variables
        self.previous_joy_message = Joy()

        # ROS Parameters
        self.GAMEPAD_TYPE = rospy.get_param('~gamepad_type', 'logitech_f710_wireless')
        self.REPEAT_RATE = rospy.get_param('~repeat_rate', 10)

        # ROS Message
        self.gamepad_msg = Gamepad()
        self.gamepad_msg.type = self.GAMEPAD_TYPE
        self.gamepad_msg.mode = None

        # Safety Checks
        if not ValidGamepadType(self.GAMEPAD_TYPE):
            rospy.logfatal('%s is not a valid gamepad type. Valid gamepad types are %s'%(self.GAMEPAD_TYPE, ValidGamepadTypes()))
            rospy.signal_shutdown('Invalid parameter')

    # START
    def Start(self):
        """ Member function used to start the spinning the ROS node."""

        # Subscribers
        self.__InitSubscribers()

        # Publishers
        self.__InitPublishers()

        # Log Node Start
        rospy.loginfo('Gamepad Node Initialised')

        # Spin ROS
        rate = rospy.Rate(self.REPEAT_RATE)
        while not rospy.is_shutdown():
            self.gamepad_msg.mode = str(self.gamepad_msg.mode) # so if set to None, ros doesn't throw an error
            self.gamepad_msg.header.stamp = rospy.Time.now()
            self.gamepad_pub.publish(self.gamepad_msg)
            rate.sleep()

    # INITIALISE SUBSCRIBERS
    def __InitSubscribers(self):
        """Initialises the ROS subscribers."""

        self.joy_sub = rospy.Subscriber('joy', Joy, self.__JoyCallback)

    # INITIALISE PUBLISHERS
    def __InitPublishers(self):
        """Initialises the ROS publishers."""

        self.gamepad_pub = rospy.Publisher('gamepad', Gamepad, queue_size=1)

    # JOY CALLBACK
    def __JoyCallback(self, joy_msg):
        """The callback for the joy subscriber. 
           Will update the self.gamepad_msg variable with appropriate values."""

        new_mode = False

        # Check to see if input mode has changed, if hasn't continue, else copy current states into new format
        new_mode = self.__UpdateGamepadMode(joy_msg)

        # Initialise array for button states if new mode and reset previous joy message
        if new_mode:
            self.previous_joy_message = Joy()
            self.__InitButtonStatesArray(joy_msg)

        # Update current button states (up, pressed, down or released)
        self.__UpdateButtonStates(joy_msg)

        # Update previous joy message
        self.previous_joy_message = joy_msg


    # DETERMINE MODE CHANGE
    def __UpdateGamepadMode(self, joy_msg):
        """Updates the gamepad mode within the self.gamepad_msg based on the current joy message data."""

        mode = None
        error = False
        new_mode = False
        previous_mode = self.gamepad_msg.mode

        if self.GAMEPAD_TYPE.lower() == 'logitech_f710_wireless':
            if len(joy_msg.axes) == 6: # DirectInput Mode
                mode = "DirectInput"
            elif len(joy_msg.axes) == 8: # XInput Mode
                mode = "XInput"
            else:
                error = True
        
        # check to see if an error occurred
        if error == True:
            rospy.logfatal('Was unable to determine the mode for the %s gamepad.'%(self.GAMEPAD_TYPE.replace('_', ' ').title()))
            rospy.signal_shutdown('Unable to determine mode for the specified gamepad.')

        # log changed mode if required
        if (previous_mode == None and mode != None) or (previous_mode != None and mode == None) or (previous_mode.lower() != mode.lower()):
            new_mode = True
            rospy.loginfo('Gamepad mode changed from %s to %s'%(str(previous_mode), str(mode)))
            
        # Update mode in message
        self.gamepad_msg.mode = mode

        return new_mode


    # INITIALISE BUTTON STATES ARRAY
    def __InitButtonStatesArray(self, joy_msg):
        """Initialises the button state array based on the current joy message data."""

        # Get gamepad buttons dictionary standard for this gamepad type and mode
        _, btns_dict = GetAxesAndButtonDictionaries(self.GAMEPAD_TYPE, 'gamepad', self.gamepad_msg.mode)

        # Set array to be zeros same length as the buttons dictionary
        self.gamepad_msg.button_states = [0] * len(btns_dict)


    # DETERMINE BUTTON STATES
    def __UpdateButtonStates(self, joy_msg):
        """Updates the button states for the self.gamepad_msg. The gamepad message will then state if the button is currently up, pressed, held down or released."""

        # Convert Joy Message into Gamepad standard
        self.gamepad_msg.axes, gamepad_buttons_data = self.__ConvertDataFromJoyToGamepadDictionaries(joy_msg, self.GAMEPAD_TYPE, self.gamepad_msg.mode)

        # Difference between current buttons data and previous data
        if len(self.previous_joy_message.axes) != 0: # first iteration
            _, previous_buttons_data = self.__ConvertDataFromJoyToGamepadDictionaries(self.previous_joy_message, self.GAMEPAD_TYPE, self.gamepad_msg.mode)
        else:
            previous_buttons_data = np.zeros_like(gamepad_buttons_data)
        diff = gamepad_buttons_data - previous_buttons_data

        for idx, val in enumerate(diff):
            # add one to button state if value is nonzero or if currently in pressed or released state
            if val != 0 or (self.gamepad_msg.button_states[idx] == BUTTON_STATES['PRESSED'] or self.gamepad_msg.button_states[idx] == BUTTON_STATES['RELEASED']):
                self.gamepad_msg.button_states[idx] += 1
            
            # sometimes gets stuck in DOWN state if button is tapped quickly
            if self.gamepad_msg.button_states[idx] == BUTTON_STATES['DOWN'] and gamepad_buttons_data[idx] == 0:
                self.gamepad_msg.button_states[idx] += 1

            # modulus to cycle through button states
            self.gamepad_msg.button_states[idx] = self.gamepad_msg.button_states[idx] % len(BUTTON_STATES)


    # CONVERT FROM JOY STANDARD TO GAMEPAD STANDARD
    def __ConvertDataFromJoyToGamepadDictionaries(self, joy_msg, gamepad_type, gamepad_mode = None):
        """Converts data from the joy message type standard into the gamepad message type standard."""
        
        # convert joy message data from tuple to numpy array
        joy_axes = np.array(joy_msg.axes, dtype=np.float32)
        joy_buttons = np.array(joy_msg.buttons, dtype=np.int32)

        # Get the axes and button dictionaries for the joy and gamepad message types
        joy_axes_dict, joy_btns_dict = GetAxesAndButtonDictionaries(gamepad_type, 'joy', gamepad_mode)
        gamepad_axes_dict, gamepad_btns_dict = GetAxesAndButtonDictionaries(gamepad_type, 'gamepad', gamepad_mode)

        # conversion procedure is based on gamepad type        
        if gamepad_type.lower() == 'logitech_f710_wireless':
            
            # copy axes up to DPAD_HOR
            axes = joy_axes[0:joy_axes_dict["DPAD_HOR"]].copy()

            # create zero array for buttons and copy up to DPAD_LEFT from buttons_joy
            buttons = np.zeros((len(gamepad_btns_dict)), dtype=np.uint8)
            buttons[0:gamepad_btns_dict["DPAD_LEFT"]] = joy_buttons.copy()

            # determine DPAD left, right, up and down button value (0 or 1)
            buttons[gamepad_btns_dict["DPAD_LEFT"]] = joy_axes[joy_axes_dict["DPAD_HOR"]] == 1
            buttons[gamepad_btns_dict["DPAD_RIGHT"]] = joy_axes[joy_axes_dict["DPAD_HOR"]] == -1
            buttons[gamepad_btns_dict["DPAD_UP"]] = joy_axes[joy_axes_dict["DPAD_VERT"]] == 1
            buttons[gamepad_btns_dict["DPAD_DOWN"]] = joy_axes[joy_axes_dict["DPAD_VERT"]] == -1

        # return raw axes and button data in gamepad format
        return axes, buttons 
        



### MAIN ###
if __name__ == "__main__":
    gamepad_node = GamepadNode()

    try:
        gamepad_node.Start()
    except rospy.ROSInterruptException as e:
        pass




